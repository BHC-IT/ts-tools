export namespace String {
	const charAt = (s : string, i: number) => s.charAt(i)
	const charCodeAt = (s : string, i: number) => s.charCodeAt(i)
	const codePointAt = (s : string, i: number) => s.codePointAt(i)
	const concat = (s : string, ...ss: string[]) => s.concat(...ss)
	const endsWith = (s : string, c?: number) => s.endsWith(s, c)
	const includes = (s: string, n: string) => s.includes(n)
	const indexOf = (s: string, n: string) => s.indexOf(n)
	const lastIndexOf = (s: string, n: string) => s.lastIndexOf(n)
	const localeCompare = (s: string, n: string, local?: string | string[], params?: object) => s.localeCompare(n, local, params)
	const match = (s: string, n: string | RegExp) => s.match(n)
	const matchAll = (s: string, n: RegExp) => s.matchAll(n)
	const normalize = (s: string, n: "NFC" | "NFD" | "NFKC" | "NFKD") => s.normalize(n)
	const padEnd = (s: string, n: number, f?: string) => s.padEnd(n, f)
	const padStart = (s: string, n: number, f?: string) => s.padStart(n, f)
	const repeat = (s: string, n: number) => s.repeat(n)
	const replace = (s: string, n: string | RegExp, ns: string) => s.replace(n, ns)
	const replaceAll = (s: string, n: string | RegExp, ns: string) => s.replaceAll(n, ns)
	const search = (s: string, n: RegExp) => s.search(n)
	const slice = (s: string, start: number, end?: number) => s.slice(start, end)
	const split = (s: string, sep?: string, end?: number) => s.split(sep, end)
	const startsWith = (s: string, c?: number) => s.startsWith(c)
	const substring = (s: string, start: number, end?: number) => s.substring(start, end)
	const toLocaleLowerCase = (s: string, local: string | string[]) => s.toLocaleLowerCase(local)
	const toLocaleUpperCase = (s: string, local: string | string[]) => s.toLocaleUpperCase(local)
	const toLowerCase = (s: string) => s.toLowerCase()
	const toString = (s: string) => s.toString()
	const toUpperCase = (s: string) => s.toUpperCase()
	const trim = (s: string) => s.trim()
	const trimEnd = (s: string) => s.trimEnd()
	const trimStart = (s: string) => s.trimStart()
	const valueOf = (s: string) => s.valueOf()

}